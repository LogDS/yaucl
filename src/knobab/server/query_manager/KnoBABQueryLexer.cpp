
// Generated from KnoBABQuery.g4 by ANTLR 4.10.1


#include "knobab/server/query_manager/KnoBABQueryLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct KnoBABQueryLexerStaticData final {
  KnoBABQueryLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  KnoBABQueryLexerStaticData(const KnoBABQueryLexerStaticData&) = delete;
  KnoBABQueryLexerStaticData(KnoBABQueryLexerStaticData&&) = delete;
  KnoBABQueryLexerStaticData& operator=(const KnoBABQueryLexerStaticData&) = delete;
  KnoBABQueryLexerStaticData& operator=(KnoBABQueryLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag knobabquerylexerLexerOnceFlag;
KnoBABQueryLexerStaticData *knobabquerylexerLexerStaticData = nullptr;

void knobabquerylexerLexerInitialize() {
  assert(knobabquerylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<KnoBABQueryLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "ACT_TABLE", "CNT_TABLE", "ATT_TABLE", "ATT", "ACTIVATION", 
      "TARGET", "INIT", "END", "EXISTS", "ABSENCE", "NEXT", "OR", "AND", 
      "FIRST", "LAST", "IF", "THEN", "ELSE", "UNTIL", "BOX", "DIAMOND", 
      "AUTO_TIMED", "LPAREN", "RPAREN", "PRESERVE", "TIMED", "THETA", "LEFT", 
      "RIGHT", "MIDDLE", "NEGATED", "HRF", "TAB", "XES", "LABEL", "INTNUMBER", 
      "NUMBER", "STRING", "SPACE", "COMMENT", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'benchmarking-log'", "'load'", "'as'", "'display'", "'for'", 
      "'list'", "'log'", "';'", "':'", "'='", "'model-check'", "'using'", 
      "'plan'", "'with'", "'operators'", "'multithreaded'", "'file'", "'declare'", 
      "'template'", "'logtop'", "'atomize!'", "'label'", "'maximum'", "'strlen'", 
      "'strategy'", "'grounding!'", "'query-plan'", "'queryplan'", "':='", 
      "'args'", "'=>'", "'('", "')'", "'&Ft'", "'&XGt'", "'&Gt'", "','", 
      "'where'", "'||'", "'true'", "'&&'", "'<'", "'<='", "'>'", "'>='", 
      "'!='", "'#'", "'no'", "'preliminary'", "'fill'", "'act'", "'attributes'", 
      "'cream'", "'off'", "'data'", "'missing'", "'stats'", "'var'", "'ACTTABLE'", 
      "'COUNTTABLE'", "'ATTRIBUTETABLE'", "'ATTRIBUTES'", "'activation'", 
      "'target'", "'INIT'", "'END'", "'EXISTS'", "'ABSENCE'", "'NEXT'", 
      "'OR'", "'AND'", "'FIRST'", "'LAST'", "'IF'", "'THEN'", "'ELSE'", 
      "'U'", "'G'", "'F'", "'auto-timed'", "'{'", "'}'", "'PRESERVE'", "'t'", 
      "'THETA'", "'L'", "'R'", "'M'", "'~'", "'HRF'", "'TAB'", "'XES'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "ACT_TABLE", "CNT_TABLE", "ATT_TABLE", 
      "ATT", "ACTIVATION", "TARGET", "INIT", "END", "EXISTS", "ABSENCE", 
      "NEXT", "OR", "AND", "FIRST", "LAST", "IF", "THEN", "ELSE", "UNTIL", 
      "BOX", "DIAMOND", "AUTO_TIMED", "LPAREN", "RPAREN", "PRESERVE", "TIMED", 
      "THETA", "LEFT", "RIGHT", "MIDDLE", "NEGATED", "HRF", "TAB", "XES", 
      "LABEL", "INTNUMBER", "NUMBER", "STRING", "SPACE", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,99,778,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
  	1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
  	1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
  	1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
  	1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
  	1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
  	1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
  	1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,
  	1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,
  	1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,
  	1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,
  	1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,
  	1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,
  	1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
  	1,79,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,
  	1,82,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,86,
  	1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,
  	1,91,1,91,1,91,1,92,1,92,5,92,718,8,92,10,92,12,92,721,9,92,1,93,4,93,
  	724,8,93,11,93,12,93,725,1,94,3,94,729,8,94,1,94,1,94,1,94,3,94,734,8,
  	94,1,95,1,95,1,95,1,95,5,95,740,8,95,10,95,12,95,743,9,95,1,95,1,95,1,
  	96,4,96,748,8,96,11,96,12,96,749,1,96,1,96,1,97,1,97,1,97,1,97,5,97,758,
  	8,97,10,97,12,97,761,9,97,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
  	5,98,772,8,98,10,98,12,98,775,9,98,1,98,1,98,1,759,0,99,1,1,3,2,5,3,7,
  	4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
  	103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
  	123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,
  	143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,
  	163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,
  	183,92,185,93,187,94,189,95,191,96,193,97,195,98,197,99,1,0,4,2,0,65,
  	90,97,122,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,786,0,
  	1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
  	0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
  	23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
  	0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
  	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
  	55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
  	0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
  	0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
  	87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
  	0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
  	0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
  	0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
  	0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
  	0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,
  	0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,
  	0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,
  	0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,
  	0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,
  	0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,
  	0,0,0,1,199,1,0,0,0,3,216,1,0,0,0,5,221,1,0,0,0,7,224,1,0,0,0,9,232,1,
  	0,0,0,11,236,1,0,0,0,13,241,1,0,0,0,15,245,1,0,0,0,17,247,1,0,0,0,19,
  	249,1,0,0,0,21,251,1,0,0,0,23,263,1,0,0,0,25,269,1,0,0,0,27,274,1,0,0,
  	0,29,279,1,0,0,0,31,289,1,0,0,0,33,303,1,0,0,0,35,308,1,0,0,0,37,316,
  	1,0,0,0,39,325,1,0,0,0,41,332,1,0,0,0,43,341,1,0,0,0,45,347,1,0,0,0,47,
  	355,1,0,0,0,49,362,1,0,0,0,51,371,1,0,0,0,53,382,1,0,0,0,55,393,1,0,0,
  	0,57,403,1,0,0,0,59,406,1,0,0,0,61,411,1,0,0,0,63,414,1,0,0,0,65,416,
  	1,0,0,0,67,418,1,0,0,0,69,422,1,0,0,0,71,427,1,0,0,0,73,431,1,0,0,0,75,
  	433,1,0,0,0,77,439,1,0,0,0,79,442,1,0,0,0,81,447,1,0,0,0,83,450,1,0,0,
  	0,85,452,1,0,0,0,87,455,1,0,0,0,89,457,1,0,0,0,91,460,1,0,0,0,93,463,
  	1,0,0,0,95,465,1,0,0,0,97,468,1,0,0,0,99,480,1,0,0,0,101,485,1,0,0,0,
  	103,489,1,0,0,0,105,500,1,0,0,0,107,506,1,0,0,0,109,510,1,0,0,0,111,515,
  	1,0,0,0,113,523,1,0,0,0,115,529,1,0,0,0,117,533,1,0,0,0,119,542,1,0,0,
  	0,121,553,1,0,0,0,123,568,1,0,0,0,125,579,1,0,0,0,127,590,1,0,0,0,129,
  	597,1,0,0,0,131,602,1,0,0,0,133,606,1,0,0,0,135,613,1,0,0,0,137,621,1,
  	0,0,0,139,626,1,0,0,0,141,629,1,0,0,0,143,633,1,0,0,0,145,639,1,0,0,0,
  	147,644,1,0,0,0,149,647,1,0,0,0,151,652,1,0,0,0,153,657,1,0,0,0,155,659,
  	1,0,0,0,157,661,1,0,0,0,159,663,1,0,0,0,161,674,1,0,0,0,163,676,1,0,0,
  	0,165,678,1,0,0,0,167,687,1,0,0,0,169,689,1,0,0,0,171,695,1,0,0,0,173,
  	697,1,0,0,0,175,699,1,0,0,0,177,701,1,0,0,0,179,703,1,0,0,0,181,707,1,
  	0,0,0,183,711,1,0,0,0,185,715,1,0,0,0,187,723,1,0,0,0,189,728,1,0,0,0,
  	191,735,1,0,0,0,193,747,1,0,0,0,195,753,1,0,0,0,197,767,1,0,0,0,199,200,
  	5,98,0,0,200,201,5,101,0,0,201,202,5,110,0,0,202,203,5,99,0,0,203,204,
  	5,104,0,0,204,205,5,109,0,0,205,206,5,97,0,0,206,207,5,114,0,0,207,208,
  	5,107,0,0,208,209,5,105,0,0,209,210,5,110,0,0,210,211,5,103,0,0,211,212,
  	5,45,0,0,212,213,5,108,0,0,213,214,5,111,0,0,214,215,5,103,0,0,215,2,
  	1,0,0,0,216,217,5,108,0,0,217,218,5,111,0,0,218,219,5,97,0,0,219,220,
  	5,100,0,0,220,4,1,0,0,0,221,222,5,97,0,0,222,223,5,115,0,0,223,6,1,0,
  	0,0,224,225,5,100,0,0,225,226,5,105,0,0,226,227,5,115,0,0,227,228,5,112,
  	0,0,228,229,5,108,0,0,229,230,5,97,0,0,230,231,5,121,0,0,231,8,1,0,0,
  	0,232,233,5,102,0,0,233,234,5,111,0,0,234,235,5,114,0,0,235,10,1,0,0,
  	0,236,237,5,108,0,0,237,238,5,105,0,0,238,239,5,115,0,0,239,240,5,116,
  	0,0,240,12,1,0,0,0,241,242,5,108,0,0,242,243,5,111,0,0,243,244,5,103,
  	0,0,244,14,1,0,0,0,245,246,5,59,0,0,246,16,1,0,0,0,247,248,5,58,0,0,248,
  	18,1,0,0,0,249,250,5,61,0,0,250,20,1,0,0,0,251,252,5,109,0,0,252,253,
  	5,111,0,0,253,254,5,100,0,0,254,255,5,101,0,0,255,256,5,108,0,0,256,257,
  	5,45,0,0,257,258,5,99,0,0,258,259,5,104,0,0,259,260,5,101,0,0,260,261,
  	5,99,0,0,261,262,5,107,0,0,262,22,1,0,0,0,263,264,5,117,0,0,264,265,5,
  	115,0,0,265,266,5,105,0,0,266,267,5,110,0,0,267,268,5,103,0,0,268,24,
  	1,0,0,0,269,270,5,112,0,0,270,271,5,108,0,0,271,272,5,97,0,0,272,273,
  	5,110,0,0,273,26,1,0,0,0,274,275,5,119,0,0,275,276,5,105,0,0,276,277,
  	5,116,0,0,277,278,5,104,0,0,278,28,1,0,0,0,279,280,5,111,0,0,280,281,
  	5,112,0,0,281,282,5,101,0,0,282,283,5,114,0,0,283,284,5,97,0,0,284,285,
  	5,116,0,0,285,286,5,111,0,0,286,287,5,114,0,0,287,288,5,115,0,0,288,30,
  	1,0,0,0,289,290,5,109,0,0,290,291,5,117,0,0,291,292,5,108,0,0,292,293,
  	5,116,0,0,293,294,5,105,0,0,294,295,5,116,0,0,295,296,5,104,0,0,296,297,
  	5,114,0,0,297,298,5,101,0,0,298,299,5,97,0,0,299,300,5,100,0,0,300,301,
  	5,101,0,0,301,302,5,100,0,0,302,32,1,0,0,0,303,304,5,102,0,0,304,305,
  	5,105,0,0,305,306,5,108,0,0,306,307,5,101,0,0,307,34,1,0,0,0,308,309,
  	5,100,0,0,309,310,5,101,0,0,310,311,5,99,0,0,311,312,5,108,0,0,312,313,
  	5,97,0,0,313,314,5,114,0,0,314,315,5,101,0,0,315,36,1,0,0,0,316,317,5,
  	116,0,0,317,318,5,101,0,0,318,319,5,109,0,0,319,320,5,112,0,0,320,321,
  	5,108,0,0,321,322,5,97,0,0,322,323,5,116,0,0,323,324,5,101,0,0,324,38,
  	1,0,0,0,325,326,5,108,0,0,326,327,5,111,0,0,327,328,5,103,0,0,328,329,
  	5,116,0,0,329,330,5,111,0,0,330,331,5,112,0,0,331,40,1,0,0,0,332,333,
  	5,97,0,0,333,334,5,116,0,0,334,335,5,111,0,0,335,336,5,109,0,0,336,337,
  	5,105,0,0,337,338,5,122,0,0,338,339,5,101,0,0,339,340,5,33,0,0,340,42,
  	1,0,0,0,341,342,5,108,0,0,342,343,5,97,0,0,343,344,5,98,0,0,344,345,5,
  	101,0,0,345,346,5,108,0,0,346,44,1,0,0,0,347,348,5,109,0,0,348,349,5,
  	97,0,0,349,350,5,120,0,0,350,351,5,105,0,0,351,352,5,109,0,0,352,353,
  	5,117,0,0,353,354,5,109,0,0,354,46,1,0,0,0,355,356,5,115,0,0,356,357,
  	5,116,0,0,357,358,5,114,0,0,358,359,5,108,0,0,359,360,5,101,0,0,360,361,
  	5,110,0,0,361,48,1,0,0,0,362,363,5,115,0,0,363,364,5,116,0,0,364,365,
  	5,114,0,0,365,366,5,97,0,0,366,367,5,116,0,0,367,368,5,101,0,0,368,369,
  	5,103,0,0,369,370,5,121,0,0,370,50,1,0,0,0,371,372,5,103,0,0,372,373,
  	5,114,0,0,373,374,5,111,0,0,374,375,5,117,0,0,375,376,5,110,0,0,376,377,
  	5,100,0,0,377,378,5,105,0,0,378,379,5,110,0,0,379,380,5,103,0,0,380,381,
  	5,33,0,0,381,52,1,0,0,0,382,383,5,113,0,0,383,384,5,117,0,0,384,385,5,
  	101,0,0,385,386,5,114,0,0,386,387,5,121,0,0,387,388,5,45,0,0,388,389,
  	5,112,0,0,389,390,5,108,0,0,390,391,5,97,0,0,391,392,5,110,0,0,392,54,
  	1,0,0,0,393,394,5,113,0,0,394,395,5,117,0,0,395,396,5,101,0,0,396,397,
  	5,114,0,0,397,398,5,121,0,0,398,399,5,112,0,0,399,400,5,108,0,0,400,401,
  	5,97,0,0,401,402,5,110,0,0,402,56,1,0,0,0,403,404,5,58,0,0,404,405,5,
  	61,0,0,405,58,1,0,0,0,406,407,5,97,0,0,407,408,5,114,0,0,408,409,5,103,
  	0,0,409,410,5,115,0,0,410,60,1,0,0,0,411,412,5,61,0,0,412,413,5,62,0,
  	0,413,62,1,0,0,0,414,415,5,40,0,0,415,64,1,0,0,0,416,417,5,41,0,0,417,
  	66,1,0,0,0,418,419,5,38,0,0,419,420,5,70,0,0,420,421,5,116,0,0,421,68,
  	1,0,0,0,422,423,5,38,0,0,423,424,5,88,0,0,424,425,5,71,0,0,425,426,5,
  	116,0,0,426,70,1,0,0,0,427,428,5,38,0,0,428,429,5,71,0,0,429,430,5,116,
  	0,0,430,72,1,0,0,0,431,432,5,44,0,0,432,74,1,0,0,0,433,434,5,119,0,0,
  	434,435,5,104,0,0,435,436,5,101,0,0,436,437,5,114,0,0,437,438,5,101,0,
  	0,438,76,1,0,0,0,439,440,5,124,0,0,440,441,5,124,0,0,441,78,1,0,0,0,442,
  	443,5,116,0,0,443,444,5,114,0,0,444,445,5,117,0,0,445,446,5,101,0,0,446,
  	80,1,0,0,0,447,448,5,38,0,0,448,449,5,38,0,0,449,82,1,0,0,0,450,451,5,
  	60,0,0,451,84,1,0,0,0,452,453,5,60,0,0,453,454,5,61,0,0,454,86,1,0,0,
  	0,455,456,5,62,0,0,456,88,1,0,0,0,457,458,5,62,0,0,458,459,5,61,0,0,459,
  	90,1,0,0,0,460,461,5,33,0,0,461,462,5,61,0,0,462,92,1,0,0,0,463,464,5,
  	35,0,0,464,94,1,0,0,0,465,466,5,110,0,0,466,467,5,111,0,0,467,96,1,0,
  	0,0,468,469,5,112,0,0,469,470,5,114,0,0,470,471,5,101,0,0,471,472,5,108,
  	0,0,472,473,5,105,0,0,473,474,5,109,0,0,474,475,5,105,0,0,475,476,5,110,
  	0,0,476,477,5,97,0,0,477,478,5,114,0,0,478,479,5,121,0,0,479,98,1,0,0,
  	0,480,481,5,102,0,0,481,482,5,105,0,0,482,483,5,108,0,0,483,484,5,108,
  	0,0,484,100,1,0,0,0,485,486,5,97,0,0,486,487,5,99,0,0,487,488,5,116,0,
  	0,488,102,1,0,0,0,489,490,5,97,0,0,490,491,5,116,0,0,491,492,5,116,0,
  	0,492,493,5,114,0,0,493,494,5,105,0,0,494,495,5,98,0,0,495,496,5,117,
  	0,0,496,497,5,116,0,0,497,498,5,101,0,0,498,499,5,115,0,0,499,104,1,0,
  	0,0,500,501,5,99,0,0,501,502,5,114,0,0,502,503,5,101,0,0,503,504,5,97,
  	0,0,504,505,5,109,0,0,505,106,1,0,0,0,506,507,5,111,0,0,507,508,5,102,
  	0,0,508,509,5,102,0,0,509,108,1,0,0,0,510,511,5,100,0,0,511,512,5,97,
  	0,0,512,513,5,116,0,0,513,514,5,97,0,0,514,110,1,0,0,0,515,516,5,109,
  	0,0,516,517,5,105,0,0,517,518,5,115,0,0,518,519,5,115,0,0,519,520,5,105,
  	0,0,520,521,5,110,0,0,521,522,5,103,0,0,522,112,1,0,0,0,523,524,5,115,
  	0,0,524,525,5,116,0,0,525,526,5,97,0,0,526,527,5,116,0,0,527,528,5,115,
  	0,0,528,114,1,0,0,0,529,530,5,118,0,0,530,531,5,97,0,0,531,532,5,114,
  	0,0,532,116,1,0,0,0,533,534,5,65,0,0,534,535,5,67,0,0,535,536,5,84,0,
  	0,536,537,5,84,0,0,537,538,5,65,0,0,538,539,5,66,0,0,539,540,5,76,0,0,
  	540,541,5,69,0,0,541,118,1,0,0,0,542,543,5,67,0,0,543,544,5,79,0,0,544,
  	545,5,85,0,0,545,546,5,78,0,0,546,547,5,84,0,0,547,548,5,84,0,0,548,549,
  	5,65,0,0,549,550,5,66,0,0,550,551,5,76,0,0,551,552,5,69,0,0,552,120,1,
  	0,0,0,553,554,5,65,0,0,554,555,5,84,0,0,555,556,5,84,0,0,556,557,5,82,
  	0,0,557,558,5,73,0,0,558,559,5,66,0,0,559,560,5,85,0,0,560,561,5,84,0,
  	0,561,562,5,69,0,0,562,563,5,84,0,0,563,564,5,65,0,0,564,565,5,66,0,0,
  	565,566,5,76,0,0,566,567,5,69,0,0,567,122,1,0,0,0,568,569,5,65,0,0,569,
  	570,5,84,0,0,570,571,5,84,0,0,571,572,5,82,0,0,572,573,5,73,0,0,573,574,
  	5,66,0,0,574,575,5,85,0,0,575,576,5,84,0,0,576,577,5,69,0,0,577,578,5,
  	83,0,0,578,124,1,0,0,0,579,580,5,97,0,0,580,581,5,99,0,0,581,582,5,116,
  	0,0,582,583,5,105,0,0,583,584,5,118,0,0,584,585,5,97,0,0,585,586,5,116,
  	0,0,586,587,5,105,0,0,587,588,5,111,0,0,588,589,5,110,0,0,589,126,1,0,
  	0,0,590,591,5,116,0,0,591,592,5,97,0,0,592,593,5,114,0,0,593,594,5,103,
  	0,0,594,595,5,101,0,0,595,596,5,116,0,0,596,128,1,0,0,0,597,598,5,73,
  	0,0,598,599,5,78,0,0,599,600,5,73,0,0,600,601,5,84,0,0,601,130,1,0,0,
  	0,602,603,5,69,0,0,603,604,5,78,0,0,604,605,5,68,0,0,605,132,1,0,0,0,
  	606,607,5,69,0,0,607,608,5,88,0,0,608,609,5,73,0,0,609,610,5,83,0,0,610,
  	611,5,84,0,0,611,612,5,83,0,0,612,134,1,0,0,0,613,614,5,65,0,0,614,615,
  	5,66,0,0,615,616,5,83,0,0,616,617,5,69,0,0,617,618,5,78,0,0,618,619,5,
  	67,0,0,619,620,5,69,0,0,620,136,1,0,0,0,621,622,5,78,0,0,622,623,5,69,
  	0,0,623,624,5,88,0,0,624,625,5,84,0,0,625,138,1,0,0,0,626,627,5,79,0,
  	0,627,628,5,82,0,0,628,140,1,0,0,0,629,630,5,65,0,0,630,631,5,78,0,0,
  	631,632,5,68,0,0,632,142,1,0,0,0,633,634,5,70,0,0,634,635,5,73,0,0,635,
  	636,5,82,0,0,636,637,5,83,0,0,637,638,5,84,0,0,638,144,1,0,0,0,639,640,
  	5,76,0,0,640,641,5,65,0,0,641,642,5,83,0,0,642,643,5,84,0,0,643,146,1,
  	0,0,0,644,645,5,73,0,0,645,646,5,70,0,0,646,148,1,0,0,0,647,648,5,84,
  	0,0,648,649,5,72,0,0,649,650,5,69,0,0,650,651,5,78,0,0,651,150,1,0,0,
  	0,652,653,5,69,0,0,653,654,5,76,0,0,654,655,5,83,0,0,655,656,5,69,0,0,
  	656,152,1,0,0,0,657,658,5,85,0,0,658,154,1,0,0,0,659,660,5,71,0,0,660,
  	156,1,0,0,0,661,662,5,70,0,0,662,158,1,0,0,0,663,664,5,97,0,0,664,665,
  	5,117,0,0,665,666,5,116,0,0,666,667,5,111,0,0,667,668,5,45,0,0,668,669,
  	5,116,0,0,669,670,5,105,0,0,670,671,5,109,0,0,671,672,5,101,0,0,672,673,
  	5,100,0,0,673,160,1,0,0,0,674,675,5,123,0,0,675,162,1,0,0,0,676,677,5,
  	125,0,0,677,164,1,0,0,0,678,679,5,80,0,0,679,680,5,82,0,0,680,681,5,69,
  	0,0,681,682,5,83,0,0,682,683,5,69,0,0,683,684,5,82,0,0,684,685,5,86,0,
  	0,685,686,5,69,0,0,686,166,1,0,0,0,687,688,5,116,0,0,688,168,1,0,0,0,
  	689,690,5,84,0,0,690,691,5,72,0,0,691,692,5,69,0,0,692,693,5,84,0,0,693,
  	694,5,65,0,0,694,170,1,0,0,0,695,696,5,76,0,0,696,172,1,0,0,0,697,698,
  	5,82,0,0,698,174,1,0,0,0,699,700,5,77,0,0,700,176,1,0,0,0,701,702,5,126,
  	0,0,702,178,1,0,0,0,703,704,5,72,0,0,704,705,5,82,0,0,705,706,5,70,0,
  	0,706,180,1,0,0,0,707,708,5,84,0,0,708,709,5,65,0,0,709,710,5,66,0,0,
  	710,182,1,0,0,0,711,712,5,88,0,0,712,713,5,69,0,0,713,714,5,83,0,0,714,
  	184,1,0,0,0,715,719,2,65,90,0,716,718,7,0,0,0,717,716,1,0,0,0,718,721,
  	1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,186,1,0,0,0,721,719,1,0,0,
  	0,722,724,2,48,57,0,723,722,1,0,0,0,724,725,1,0,0,0,725,723,1,0,0,0,725,
  	726,1,0,0,0,726,188,1,0,0,0,727,729,5,45,0,0,728,727,1,0,0,0,728,729,
  	1,0,0,0,729,730,1,0,0,0,730,733,3,187,93,0,731,732,5,46,0,0,732,734,3,
  	187,93,0,733,731,1,0,0,0,733,734,1,0,0,0,734,190,1,0,0,0,735,741,5,34,
  	0,0,736,740,8,1,0,0,737,738,5,92,0,0,738,740,7,1,0,0,739,736,1,0,0,0,
  	739,737,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,744,
  	1,0,0,0,743,741,1,0,0,0,744,745,5,34,0,0,745,192,1,0,0,0,746,748,7,2,
  	0,0,747,746,1,0,0,0,748,749,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,
  	751,1,0,0,0,751,752,6,96,0,0,752,194,1,0,0,0,753,754,5,47,0,0,754,755,
  	5,42,0,0,755,759,1,0,0,0,756,758,9,0,0,0,757,756,1,0,0,0,758,761,1,0,
  	0,0,759,760,1,0,0,0,759,757,1,0,0,0,760,762,1,0,0,0,761,759,1,0,0,0,762,
  	763,5,42,0,0,763,764,5,47,0,0,764,765,1,0,0,0,765,766,6,97,0,0,766,196,
  	1,0,0,0,767,768,5,47,0,0,768,769,5,47,0,0,769,773,1,0,0,0,770,772,8,3,
  	0,0,771,770,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,
  	776,1,0,0,0,775,773,1,0,0,0,776,777,6,98,0,0,777,198,1,0,0,0,10,0,719,
  	725,728,733,739,741,749,759,773,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  knobabquerylexerLexerStaticData = staticData.release();
}

}

KnoBABQueryLexer::KnoBABQueryLexer(CharStream *input) : Lexer(input) {
  KnoBABQueryLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *knobabquerylexerLexerStaticData->atn, knobabquerylexerLexerStaticData->decisionToDFA, knobabquerylexerLexerStaticData->sharedContextCache);
}

KnoBABQueryLexer::~KnoBABQueryLexer() {
  delete _interpreter;
}

std::string KnoBABQueryLexer::getGrammarFileName() const {
  return "KnoBABQuery.g4";
}

const std::vector<std::string>& KnoBABQueryLexer::getRuleNames() const {
  return knobabquerylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& KnoBABQueryLexer::getChannelNames() const {
  return knobabquerylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& KnoBABQueryLexer::getModeNames() const {
  return knobabquerylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& KnoBABQueryLexer::getVocabulary() const {
  return knobabquerylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView KnoBABQueryLexer::getSerializedATN() const {
  return knobabquerylexerLexerStaticData->serializedATN;
}

const atn::ATN& KnoBABQueryLexer::getATN() const {
  return *knobabquerylexerLexerStaticData->atn;
}




void KnoBABQueryLexer::initialize() {
  std::call_once(knobabquerylexerLexerOnceFlag, knobabquerylexerLexerInitialize);
}
